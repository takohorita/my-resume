{"version":3,"file":"index.js","names":["_textlintRuleHelper","require","_matchIndex","_regexpStringMatcher","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","assert","PunctuationRegExp","ZenRegExpStr","defaultSpaceOptions","alphabets","numbers","punctuation","defaultOptions","lintStyledNode","allows","reporter","context","options","parseSpaceOption","opt","exceptPunctuation","Array","isArray","every","v","includes","userOptions","fromEntries","map","Syntax","RuleError","report","fixer","getSource","helper","RuleHelper","spaceOption","space","createFilter","text","padding","allowedPatterns","matchPatterns","match","targetChar","index","test","isAllowed","some","allow","startIndex","endIndex","noSpaceBetween","node","betweenHanAndZen","matchCaptureGroupAll","RegExp","concat","betweenZenAndHan","reportMatch","fix","replaceTextRange","needSpaceBetween","generateRegExp","btwHanAndZen","expStr","betweenHanAndZenRegExp","betweenZenAndHanRegExp","errorMsg","Str","isPlainStrNode","noSpace","module","exports","linter"],"sources":["../src/index.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst assert = require(\"assert\");\n/*\n 全角文字と半角文字の間にスペースを入れるかどうか\n */\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { matchCaptureGroupAll } from \"match-index\";\nimport { matchPatterns } from \"@textlint/regexp-string-matcher\";\n\nconst PunctuationRegExp = /[。、]/;\nconst ZenRegExpStr = \"[、。]|[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ]\";\nconst defaultSpaceOptions = {\n    alphabets: false,\n    numbers: false,\n    punctuation: false\n};\nconst defaultOptions = {\n    // プレーンテキスト以外を対象とするか See https://github.com/textlint/textlint-rule-helper#rulehelperisplainstrnodenode-boolean\n    lintStyledNode: false,\n    /**\n     * 例外として無視する文字列\n     * RegExp-like Stringの配列を指定\n     * https://github.com/textlint/regexp-string-matcher?tab=readme-ov-file#regexp-like-string\n     */\n    allows: []\n};\n\nfunction reporter(context, options = {}) {\n    /**\n     * 入力された `space` オプションを内部処理用に成形する\n     * @param {string|Array|undefined} opt `space` オプションのインプット\n     * @param {boolean|undefined} exceptPunctuation `exceptPunctuation` オプションのインプット\n     * @returns {Object}\n     */\n    const parseSpaceOption = (opt, exceptPunctuation) => {\n        if (typeof opt === \"string\") {\n            assert(opt === \"always\" || opt === \"never\", `\"space\" options should be \"always\", \"never\" or an array.`);\n\n            if (opt === \"always\") {\n                if (exceptPunctuation === false) {\n                    return { ...defaultSpaceOptions, alphabets: true, numbers: true, punctuation: true };\n                } else {\n                    return { ...defaultSpaceOptions, alphabets: true, numbers: true };\n                }\n            } else if (opt === \"never\") {\n                if (exceptPunctuation === false) {\n                    return { ...defaultSpaceOptions, punctuation: true };\n                } else {\n                    return defaultSpaceOptions;\n                }\n            }\n        } else if (Array.isArray(opt)) {\n            assert(\n                opt.every((v) => Object.keys(defaultSpaceOptions).includes(v)),\n                `Only \"alphabets\", \"numbers\", \"punctuation\" can be included in the array.`\n            );\n            const userOptions = Object.fromEntries(opt.map((key) => [key, true]));\n            return { ...defaultSpaceOptions, ...userOptions };\n        }\n\n        return defaultSpaceOptions;\n    };\n\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const helper = new RuleHelper();\n    const spaceOption = parseSpaceOption(options.space, options.exceptPunctuation);\n    const lintStyledNode =\n        options.lintStyledNode !== undefined ? options.lintStyledNode : defaultOptions.lintStyledNode;\n    const allows = options.allows !== undefined ? options.allows : defaultOptions.allows;\n    /**\n     * `text`を対象に例外オプションを取り除くfilter関数を返す\n     * @param {string} text テスト対象のテキスト全体\n     * @param {number} padding +1 or -1\n     * @returns {function(*, *)}\n     */\n    const createFilter = (text, padding) => {\n        const allowedPatterns = allows.length > 0 ? matchPatterns(text, allows) : [];\n        /**\n         * `PunctuationRegExp`で指定された例外を取り除く\n         * @param {Object} match\n         * @returns {boolean}\n         */\n        return (match) => {\n            const targetChar = text[match.index + padding];\n            if (!targetChar) {\n                return false;\n            }\n            if (!spaceOption.punctuation && PunctuationRegExp.test(targetChar)) {\n                return false;\n            }\n            const isAllowed = allowedPatterns.some((allow) => {\n                // start ... end\n                if (allow.startIndex <= match.index && match.index <= allow.endIndex) {\n                    return true;\n                }\n                return false;\n            });\n            return !isAllowed;\n        };\n    };\n    // Never: アルファベットと全角の間はスペースを入れない\n    const noSpaceBetween = (node, text) => {\n        const betweenHanAndZen = matchCaptureGroupAll(text, new RegExp(`[A-Za-z0-9]([ 　])(?:${ZenRegExpStr})`));\n        const betweenZenAndHan = matchCaptureGroupAll(text, new RegExp(`(?:${ZenRegExpStr})([ 　])[A-Za-z0-9]`));\n        const reportMatch = (match) => {\n            const { index } = match;\n            report(\n                node,\n                new RuleError(\"原則として、全角文字と半角文字の間にスペースを入れません。\", {\n                    index: match.index,\n                    fix: fixer.replaceTextRange([index, index + 1], \"\")\n                })\n            );\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, -1)).forEach(reportMatch);\n    };\n\n    // Always: アルファベットと全角の間はスペースを入れる\n    const needSpaceBetween = (node, text, options) => {\n        /**\n         * オプションを元に正規表現オプジェクトを生成する\n         * @param {Array} opt `space` オプション\n         * @param {boolean} btwHanAndZen=true 半角全角の間か全角半角の間か\n         * @returns {Object}\n         */\n        const generateRegExp = (opt, btwHanAndZen = true) => {\n            const alphabets = opt.alphabets ? \"A-Za-z\" : \"\";\n            const numbers = opt.numbers ? \"0-9\" : \"\";\n\n            let expStr;\n            if (btwHanAndZen) {\n                expStr = `([${alphabets}${numbers}])(?:${ZenRegExpStr})`;\n            } else {\n                expStr = `(${ZenRegExpStr})[${alphabets}${numbers}]`;\n            }\n\n            return new RegExp(expStr);\n        };\n\n        const betweenHanAndZenRegExp = generateRegExp(options);\n        const betweenZenAndHanRegExp = generateRegExp(options, false);\n        const errorMsg = \"原則として、全角文字と半角文字の間にスペースを入れます。\";\n\n        const betweenHanAndZen = matchCaptureGroupAll(text, betweenHanAndZenRegExp);\n        const betweenZenAndHan = matchCaptureGroupAll(text, betweenZenAndHanRegExp);\n        const reportMatch = (match) => {\n            const { index } = match;\n            report(\n                node,\n                new RuleError(errorMsg, {\n                    index: match.index,\n                    fix: fixer.replaceTextRange([index + 1, index + 1], \" \")\n                })\n            );\n        };\n        betweenHanAndZen.filter(createFilter(text, 1)).forEach(reportMatch);\n        betweenZenAndHan.filter(createFilter(text, 0)).forEach(reportMatch);\n    };\n    return {\n        [Syntax.Str](node) {\n            if (!lintStyledNode && !helper.isPlainStrNode(node)) {\n                return;\n            }\n            const text = getSource(node);\n\n            const noSpace = (key) => (key === \"punctuation\" ? true : !spaceOption[key]);\n            if (Object.keys(spaceOption).every(noSpace)) {\n                noSpaceBetween(node, text);\n            } else {\n                needSpaceBetween(node, text, spaceOption);\n            }\n        }\n    };\n}\n\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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"}