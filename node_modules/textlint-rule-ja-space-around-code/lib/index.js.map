{"version":3,"file":"index.js","names":["isJapaneseChar","text","test","defaultOptions","before","after","reporter","context","options","Syntax","RuleError","report","fixer","getSource","allowBeforeSpace","allowAfterSpace","Code","node","nodeText","textWithPadding","beforeChar","beforeBeforeChar","existBeforeChar","afterChar","length","afterAfterChar","existAfterChar","index","fix","insertTextBeforeRange","replaceTextRange","insertTextAfterRange","module","exports","linter"],"sources":["../src/index.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst isJapaneseChar = (text) => {\n    return /^(?:[\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])$/.test(text);\n};\nconst defaultOptions = {\n    before: false,\n    after: false\n};\nfunction reporter(context, options) {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const allowBeforeSpace = options.before || defaultOptions.before;\n    const allowAfterSpace = options.after || defaultOptions.after;\n    return {\n        [Syntax.Code](node) {\n            const nodeText = getSource(node);\n            // |  `code`  |\n            // InlineCodeの前後2文字文を取得\n            // スペース + 前後の文字を取るため\n            // 文字が日本語以外はチェック対象にしないようにするため\n            const textWithPadding = getSource(node, 2, 2);\n            if (!textWithPadding) {\n                return;\n            }\n            const beforeChar = textWithPadding[1];\n            const beforeBeforeChar = textWithPadding[0];\n            const existBeforeChar = nodeText[0] !== beforeChar;\n            const afterChar = textWithPadding[textWithPadding.length - 2];\n            const afterAfterChar = textWithPadding[textWithPadding.length - 1];\n            const existAfterChar = nodeText[textWithPadding.length - 1] !== afterChar;\n            // InlineCodeの前に文字が存在している時のみチェック\n            if (existBeforeChar) {\n                if (allowBeforeSpace) {\n                    if (beforeChar !== \" \" && isJapaneseChar(beforeChar)) {\n                        report(\n                            node,\n                            new RuleError(\"インラインコードの前にスペースを入れてください。\", {\n                                index: -1, // before `\n                                fix: fixer.insertTextBeforeRange([0, 0], \" \")\n                            })\n                        );\n                    }\n                } else {\n                    if (beforeChar === \" \" && isJapaneseChar(beforeBeforeChar)) {\n                        report(\n                            node,\n                            new RuleError(\"インラインコードの前にスペースを入れません。\", {\n                                index: -1, // before `\n                                fix: fixer.replaceTextRange([-1, 0], \"\")\n                            })\n                        );\n                    }\n                }\n            }\n            // InlineCodeの後に文字が存在している時のみチェック\n            if (existAfterChar) {\n                if (allowAfterSpace) {\n                    if (afterChar !== \" \" && isJapaneseChar(afterChar)) {\n                        report(\n                            node,\n                            new RuleError(\"インラインコードの後にスペースを入れてください。\", {\n                                index: nodeText.length,\n                                fix: fixer.insertTextAfterRange([0, nodeText.length], \" \")\n                            })\n                        );\n                    }\n                } else {\n                    if (afterChar === \" \" && isJapaneseChar(afterAfterChar)) {\n                        report(\n                            node,\n                            new RuleError(\"インラインコードの後にスペースを入れません。\", {\n                                index: nodeText.length + 1,\n                                fix: fixer.replaceTextRange([nodeText.length, nodeText.length + 1], \"\")\n                            })\n                        );\n                    }\n                }\n            }\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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"}