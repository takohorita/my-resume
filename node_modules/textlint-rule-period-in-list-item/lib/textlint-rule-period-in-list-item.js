// MIT © 2017 azu
"use strict";

var _checkEndsWithPeriod = require("check-ends-with-period");
/**
 * check `text` that the end is not periodMark
 * @param {string} text
 * @param {string[]} periodMarks
 * @returns {{valid: boolean, periodMark: string, index: number}}
 */
var checkEndsWithoutPeriodMark = (text, periodMarks) => {
  var {
    periodMark,
    index
  } = (0, _checkEndsWithPeriod.checkEndsWithPeriod)(text, {
    periodMarks
  });
  // actually periodMark is at end.
  var isPeriodMarkAtEnd = periodMarks.indexOf(periodMark) !== -1;
  if (isPeriodMarkAtEnd) {
    return {
      valid: false,
      periodMark,
      index
    };
  }
  return {
    valid: true,
    periodMark,
    index
  };
};
/**
 * Return true if parent node is Ordered List
 * @param node
 * @returns {boolean}
 */
var isItemNodeInOrderedList = node => {
  return node && node.parent && node.parent.ordered === true;
};
var defaultOptions = {
  // prefer to use period mark.
  // "" (default is no period)
  // You can select period mark like "." from "periodMarks".
  "periodMark": "",
  // Built-in recognized period mark list
  // if the period of the text is not `periodMark` and it is a string in the `periodMarks`,
  "periodMarks": [".", "。", "．"],
  // Ignore only link tag
  // - [text](link)
  // It is not needed period mark
  "ignoreLinkEnd": true,
  // define exception period mark list at end of the list item
  // Ignore this period mark
  "allowPeriodMarks": [],
  // Allow emoji at end of the list item
  "allowEmoji": false,
  // Allow ordered list item
  // 1. ~.
  // 2. ~.
  "allowOrderedList": false,
  // If not exist `periodMark` at end of the list item
  // Automatically, append `periodMark` when does textlint --fix
  "forceAppendPeriod": false
};
var reporter = function reporter(context) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var {
    Syntax,
    RuleError,
    report,
    fixer,
    getSource
  } = context;
  var preferPeriodMark = options.periodMark || defaultOptions.periodMark;
  var isNotNeededPeriodMark = preferPeriodMark === "";
  // always `preferPeriodMark` is added to periodMarks
  var periodMarks = (options.periodMarks || defaultOptions.periodMarks).concat(preferPeriodMark);
  var allowPeriodMarks = options.allowPeriodMarks !== undefined ? options.allowPeriodMarks : defaultOptions.allowPeriodMarks;
  var ignoreLinkEnd = options.ignoreLinkEnd !== undefined ? options.ignoreLinkEnd : defaultOptions.ignoreLinkEnd;
  var allowEmoji = options.allowEmoji !== undefined ? options.allowEmoji : defaultOptions.allowEmoji;
  var allowOrderedList = options.allowOrderedList !== undefined ? options.allowOrderedList : defaultOptions.allowOrderedList;
  var forceAppendPeriod = options.forceAppendPeriod !== undefined ? options.forceAppendPeriod : defaultOptions.forceAppendPeriod;
  return {
    [Syntax.ListItem](node) {
      // Skip Ordered List item if option is enabled
      if (allowOrderedList && isItemNodeInOrderedList(node)) {
        return;
      }
      // A ListItem should includes child nodes.
      // https://github.com/textlint-rule/textlint-rule-period-in-list-item/issues/3
      var paragraphNodes = node.children.filter(node => node.type === Syntax.Paragraph);
      var firstParagraphNode = paragraphNodes[0];
      if (!firstParagraphNode) {
        return;
      }
      var text = getSource(firstParagraphNode);
      // Prefer no needed period, but exist period
      if (isNotNeededPeriodMark) {
        var {
          valid: _valid,
          periodMark: _periodMark,
          index: _index
        } = checkEndsWithoutPeriodMark(text, periodMarks);
        if (_valid) {
          return;
        }
        // should be remove period mark
        report(firstParagraphNode, new RuleError("Should remove period mark(\"".concat(_periodMark, "\") at end of list item."), {
          index: _index,
          fix: fixer.replaceTextRange([_index, _index + _periodMark.length], "")
        }));
        return;
      }
      // - [link](http://example)
      // should be ignored
      if (ignoreLinkEnd) {
        var linkNodes = firstParagraphNode.children;
        if (linkNodes.length === 1 && linkNodes[0].type === Syntax.Link) {
          return;
        }
      }
      var {
        valid,
        periodMark,
        index
      } = (0, _checkEndsWithPeriod.checkEndsWithPeriod)(text, {
        periodMarks,
        allowPeriodMarks,
        allowEmoji
      });
      // Prefer to use period
      if (valid) {
        //  but exist difference period
        var isPeriodMarkAtEnd = periodMarks.indexOf(periodMark) !== -1;
        // exception case that should not report
        // !?
        if (!isPeriodMarkAtEnd) {
          return;
        }
        // periodMark is expected, then exit
        if (periodMark === preferPeriodMark) {
          return;
        }
        report(firstParagraphNode, new RuleError("Prefer to use period mark(\"".concat(preferPeriodMark, "\") at end of list item."), {
          index,
          fix: fixer.replaceTextRange([index, index + periodMark.length], preferPeriodMark)
        }));
      } else {
        // but not exist period
        if (forceAppendPeriod) {
          report(firstParagraphNode, new RuleError("Not exist period mark(\"".concat(preferPeriodMark, "\") at end of list item."), {
            index,
            fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)
          }));
        } else {
          report(firstParagraphNode, new RuleError("Not exist period mark(\"".concat(preferPeriodMark, "\") at end of list item."), {
            index
          }));
        }
      }
    }
  };
};
module.exports = {
  linter: reporter,
  fixer: reporter
};
//# sourceMappingURL=textlint-rule-period-in-list-item.js.map