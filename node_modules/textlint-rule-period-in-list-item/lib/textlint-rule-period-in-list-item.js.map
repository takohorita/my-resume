{"version":3,"file":"textlint-rule-period-in-list-item.js","names":["checkEndsWithoutPeriodMark","text","periodMarks","periodMark","index","checkEndsWithPeriod","isPeriodMarkAtEnd","indexOf","valid","isItemNodeInOrderedList","node","parent","ordered","defaultOptions","reporter","context","options","Syntax","RuleError","report","fixer","getSource","preferPeriodMark","isNotNeededPeriodMark","concat","allowPeriodMarks","undefined","ignoreLinkEnd","allowEmoji","allowOrderedList","forceAppendPeriod","ListItem","paragraphNodes","children","filter","type","Paragraph","firstParagraphNode","fix","replaceTextRange","length","linkNodes","Link","module","exports","linter"],"sources":["../src/textlint-rule-period-in-list-item.js"],"sourcesContent":["// MIT © 2017 azu\n\"use strict\";\nimport { checkEndsWithPeriod } from \"check-ends-with-period\";\n\n/**\n * check `text` that the end is not periodMark\n * @param {string} text\n * @param {string[]} periodMarks\n * @returns {{valid: boolean, periodMark: string, index: number}}\n */\nconst checkEndsWithoutPeriodMark = (text, periodMarks) => {\n    const {periodMark, index} = checkEndsWithPeriod(text, {\n        periodMarks\n    });\n    // actually periodMark is at end.\n    const isPeriodMarkAtEnd = periodMarks.indexOf(periodMark) !== -1;\n    if (isPeriodMarkAtEnd) {\n        return {\n            valid: false,\n            periodMark,\n            index\n        };\n    }\n    return {\n        valid: true,\n        periodMark,\n        index\n    };\n};\n/**\n * Return true if parent node is Ordered List\n * @param node\n * @returns {boolean}\n */\nconst isItemNodeInOrderedList = (node) => {\n    return node && node.parent && node.parent.ordered === true;\n};\nconst defaultOptions = {\n    // prefer to use period mark.\n    // \"\" (default is no period)\n    // You can select period mark like \".\" from \"periodMarks\".\n    \"periodMark\": \"\",\n    // Built-in recognized period mark list\n    // if the period of the text is not `periodMark` and it is a string in the `periodMarks`,\n    \"periodMarks\": [\".\", \"。\", \"．\"],\n    // Ignore only link tag\n    // - [text](link)\n    // It is not needed period mark\n    \"ignoreLinkEnd\": true,\n    // define exception period mark list at end of the list item\n    // Ignore this period mark\n    \"allowPeriodMarks\": [],\n    // Allow emoji at end of the list item\n    \"allowEmoji\": false,\n    // Allow ordered list item\n    // 1. ~.\n    // 2. ~.\n    \"allowOrderedList\": false,\n    // If not exist `periodMark` at end of the list item\n    // Automatically, append `periodMark` when does textlint --fix\n    \"forceAppendPeriod\": false\n};\nconst reporter = (context, options = {}) => {\n    const {Syntax, RuleError, report, fixer, getSource} = context;\n    const preferPeriodMark = options.periodMark || defaultOptions.periodMark;\n    const isNotNeededPeriodMark = preferPeriodMark === \"\";\n    // always `preferPeriodMark` is added to periodMarks\n    const periodMarks = (options.periodMarks || defaultOptions.periodMarks).concat(preferPeriodMark);\n    const allowPeriodMarks = options.allowPeriodMarks !== undefined\n        ? options.allowPeriodMarks\n        : defaultOptions.allowPeriodMarks;\n    const ignoreLinkEnd = options.ignoreLinkEnd !== undefined\n        ? options.ignoreLinkEnd\n        : defaultOptions.ignoreLinkEnd;\n    const allowEmoji = options.allowEmoji !== undefined\n        ? options.allowEmoji\n        : defaultOptions.allowEmoji;\n    const allowOrderedList = options.allowOrderedList !== undefined\n        ? options.allowOrderedList\n        : defaultOptions.allowOrderedList;\n    const forceAppendPeriod = options.forceAppendPeriod !== undefined\n        ? options.forceAppendPeriod\n        : defaultOptions.forceAppendPeriod;\n    return {\n        [Syntax.ListItem](node) {\n            // Skip Ordered List item if option is enabled\n            if (allowOrderedList && isItemNodeInOrderedList(node)) {\n                return;\n            }\n            // A ListItem should includes child nodes.\n            // https://github.com/textlint-rule/textlint-rule-period-in-list-item/issues/3\n            const paragraphNodes = node.children.filter(node => node.type === Syntax.Paragraph);\n            const firstParagraphNode = paragraphNodes[0];\n            if (!firstParagraphNode) {\n                return;\n            }\n            const text = getSource(firstParagraphNode);\n            // Prefer no needed period, but exist period\n            if (isNotNeededPeriodMark) {\n                const {valid, periodMark, index} = checkEndsWithoutPeriodMark(text, periodMarks);\n                if (valid) {\n                    return;\n                }\n                // should be remove period mark\n                report(firstParagraphNode, new RuleError(`Should remove period mark(\"${periodMark}\") at end of list item.`, {\n                    index,\n                    fix: fixer.replaceTextRange([index, index + periodMark.length], \"\")\n                }));\n                return;\n            }\n            // - [link](http://example)\n            // should be ignored\n            if (ignoreLinkEnd) {\n                const linkNodes = firstParagraphNode.children;\n                if (linkNodes.length === 1 && linkNodes[0].type === Syntax.Link) {\n                    return;\n                }\n            }\n            const {valid, periodMark, index} = checkEndsWithPeriod(text, {\n                periodMarks,\n                allowPeriodMarks,\n                allowEmoji,\n            });\n            // Prefer to use period\n            if (valid) {\n                //  but exist difference period\n                const isPeriodMarkAtEnd = periodMarks.indexOf(periodMark) !== -1;\n                // exception case that should not report\n                // !?\n                if (!isPeriodMarkAtEnd) {\n                    return;\n                }\n                // periodMark is expected, then exit\n                if (periodMark === preferPeriodMark) {\n                    return;\n                }\n                report(firstParagraphNode, new RuleError(`Prefer to use period mark(\"${preferPeriodMark}\") at end of list item.`, {\n                    index,\n                    fix: fixer.replaceTextRange([index, index + periodMark.length], preferPeriodMark)\n                }));\n            } else {\n                // but not exist period\n                if (forceAppendPeriod) {\n                    report(firstParagraphNode, new RuleError(`Not exist period mark(\"${preferPeriodMark}\") at end of list item.`, {\n                        index,\n                        fix: fixer.replaceTextRange([index + 1, index + 1], preferPeriodMark)\n                    }));\n                } else {\n                    report(firstParagraphNode, new RuleError(`Not exist period mark(\"${preferPeriodMark}\") at end of list item.`, {\n                        index\n                    }))\n                }\n            }\n        }\n    }\n};\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"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"}