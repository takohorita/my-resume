{"version":3,"file":"index.js","names":["_textlintRuleHelper","require","_matchIndex","_regx","_interopRequireDefault","_templateObject","obj","__esModule","default","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","rx","regx","japaneseRegExp","reporter","context","Syntax","RuleError","report","fixer","getSource","helper","RuleHelper","Str","node","isPlainStrNode","text","matchReg","katakakana","matchAll","forEach","match","input","captureGroups","test","captureGroup","index","fix","replaceTextRange","module","exports","linter"],"sources":["../src/index.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\n/*\n 全角文字と半角文字の間\n 全角文字どうしの間にスペースを入れません。\n ただしカタカナ複合語の場合を除きます。\n */\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { matchAll } from \"match-index\";\nimport regx from \"regx\";\nconst rx = regx(\"g\");\nconst japaneseRegExp =\n    /(?:[々〇〻\\u3400-\\u4DBF\\u4E00-\\u9FFF\\uF900-\\uFAFF]|[\\uD840-\\uD87F][\\uDC00-\\uDFFF]|[ぁ-んァ-ヶ])/;\n\nfunction reporter(context) {\n    const { Syntax, RuleError, report, fixer, getSource } = context;\n    const helper = new RuleHelper();\n    return {\n        [Syntax.Str](node) {\n            if (!helper.isPlainStrNode(node)) {\n                return;\n            }\n            const text = getSource(node);\n            // 全角同士の間は半角スペースを入れない\n            const matchReg = rx`${japaneseRegExp}( )${japaneseRegExp}`;\n            const katakakana = /[ァ-ヶ]( )[ァ-ヶ]/;\n            matchAll(text, matchReg).forEach((match) => {\n                const { input, captureGroups } = match;\n                // ただしカタカナ複合語の場合を除きます。\n                if (katakakana.test(input)) {\n                    return;\n                }\n                captureGroups.forEach((captureGroup) => {\n                    const index = captureGroup.index;\n                    report(\n                        node,\n                        new RuleError(\"原則として、全角文字どうしの間にスペースを入れません。\", {\n                            index: index,\n                            fix: fixer.replaceTextRange([index, index + 1], \"\")\n                        })\n                    );\n                });\n            });\n        }\n    };\n}\nmodule.exports = {\n    linter: reporter,\n    fixer: reporter\n};\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA,IAAAA,mBAAA,GAAAC,OAAA;AACA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,KAAA,GAAAC,sBAAA,CAAAH,OAAA;AAAwB,IAAAI,eAAA;AAAA,SAAAD,uBAAAE,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAAA,SAAAG,uBAAAC,OAAA,EAAAC,GAAA,SAAAA,GAAA,IAAAA,GAAA,GAAAD,OAAA,CAAAE,KAAA,cAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAE,gBAAA,CAAAL,OAAA,IAAAC,GAAA,IAAAK,KAAA,EAAAH,MAAA,CAAAC,MAAA,CAAAH,GAAA;AACxB,IAAMM,EAAE,GAAG,IAAAC,aAAI,EAAC,GAAG,CAAC;AACpB,IAAMC,cAAc,GAChB,0FAA0F;AAE9F,SAASC,QAAQA,CAACC,OAAO,EAAE;EACvB,IAAM;IAAEC,MAAM;IAAEC,SAAS;IAAEC,MAAM;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGL,OAAO;EAC/D,IAAMM,MAAM,GAAG,IAAIC,8BAAU,CAAC,CAAC;EAC/B,OAAO;IACH,CAACN,MAAM,CAACO,GAAG,EAAEC,IAAI,EAAE;MACf,IAAI,CAACH,MAAM,CAACI,cAAc,CAACD,IAAI,CAAC,EAAE;QAC9B;MACJ;MACA,IAAME,IAAI,GAAGN,SAAS,CAACI,IAAI,CAAC;MAC5B;MACA,IAAMG,QAAQ,GAAGhB,EAAE,CAAAZ,eAAA,KAAAA,eAAA,GAAAI,sBAAA,oBAAGU,cAAc,EAAMA,cAAc,CAAE;MAC1D,IAAMe,UAAU,GAAG,eAAe;MAClC,IAAAC,oBAAQ,EAACH,IAAI,EAAEC,QAAQ,CAAC,CAACG,OAAO,CAAEC,KAAK,IAAK;QACxC,IAAM;UAAEC,KAAK;UAAEC;QAAc,CAAC,GAAGF,KAAK;QACtC;QACA,IAAIH,UAAU,CAACM,IAAI,CAACF,KAAK,CAAC,EAAE;UACxB;QACJ;QACAC,aAAa,CAACH,OAAO,CAAEK,YAAY,IAAK;UACpC,IAAMC,KAAK,GAAGD,YAAY,CAACC,KAAK;UAChClB,MAAM,CACFM,IAAI,EACJ,IAAIP,SAAS,CAAC,6BAA6B,EAAE;YACzCmB,KAAK,EAAEA,KAAK;YACZC,GAAG,EAAElB,KAAK,CAACmB,gBAAgB,CAAC,CAACF,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE;UACtD,CAAC,CACL,CAAC;QACL,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ,CAAC;AACL;AACAG,MAAM,CAACC,OAAO,GAAG;EACbC,MAAM,EAAE3B,QAAQ;EAChBK,KAAK,EAAEL;AACX,CAAC"}