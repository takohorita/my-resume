{"version":3,"file":"use-si-units.js","names":["_matchIndex","require","_nodeUtil","P","numberWithUnitTarget","defaultOptions","allowedUnits","restrictNonSIUnits","siUnitOneChar","oneOf","siUnitManyChar","regexp","allowWordManyChar","siDerivedUnitOneChar","siDerivedUnitManyChar","nonSiUnitOneChar","nonSiUnitManyChar","siPrefixOneChar","siPrefixManyChar","string","concatSymbol","generateSiUnitParser","siUnitsManyChar","alt","siUnitsOneChar","length","allowedUnitsString","reduce","prev","value","RegExp","siUnits","siSymbols","digit","many","assert","results","parse","status","module","exports","context","userOptions","options","Object","assign","Syntax","RuleError","report","getSource","Str","node","isUserWrittenNode","matches","matchCaptureGroupAll","forEach","match","siUnitParser","parseResult","text","isSymbolOnly","index"],"sources":["../src/use-si-units.js"],"sourcesContent":["// use-si-unit.js\n'use strict';\nconst P = require('parsimmon');\nimport { matchCaptureGroupAll } from 'match-index';\nimport { isUserWrittenNode } from './util/node-util';\n\nconst numberWithUnitTarget = /[0-9]+? ([a-zA-ZΩΩ℧%‰‱℃℉ℊÅμ°′″^\\-\\/·･・\\(\\)]+)/;\n\nconst defaultOptions = {\n    allowedUnits: [],\n    restrictNonSIUnits: false,\n};\n\nconst siUnitOneChar = P.oneOf('-msAKg');\nconst siUnitManyChar = P.regexp(/mol|cd/);\nconst allowWordManyChar = P.regexp(/and|or|nor|but|by|for|from|on|out|per|to|of|at|over|under|between|among|into|upon|within|around|plus|minus|times|divided/);\nconst siDerivedUnitOneChar = P.oneOf('JWCVFΩSTH℃');\nconst siDerivedUnitManyChar = P.regexp(/rad|sr|Hz|N|Pa|Wb|lm|lx|Bq|Gy|Sv|kat/);\nconst nonSiUnitOneChar = P.oneOf('hd°′″lLtB');\nconst nonSiUnitManyChar = P.regexp(/min|au|ha|Da|eV|Np|dB/);\nconst siPrefixOneChar = P.oneOf('YZEPTGMkhcdmμnpfazy');\nconst siPrefixManyChar = P.string('da');\nconst concatSymbol = P.oneOf('^/·･・()');\n\nconst generateSiUnitParser = (allowedUnits, restrictNonSIUnits) => {\n    // Combine parsers. The longer patterns must come first to avoid confusing patterns with the same prefix.\n    let siUnitsManyChar = P.alt(siUnitManyChar, siDerivedUnitManyChar);\n    let siUnitsOneChar = P.alt(siUnitOneChar, siDerivedUnitOneChar);\n\n    if(restrictNonSIUnits !== true) {\n        siUnitsManyChar = P.alt(siUnitsManyChar, nonSiUnitManyChar);\n        siUnitsOneChar = P.alt(siUnitsOneChar, nonSiUnitOneChar);\n    }\n    if(allowedUnits.length > 0) {\n        const allowedUnitsString = allowedUnits.reduce((prev, value) => prev === '' ? value : `${prev}|${value}`, '');\n        siUnitsManyChar = P.alt(siUnitsManyChar, P.regexp(new RegExp(allowedUnitsString)));\n    }\n    const siUnits = P.alt(siUnitsManyChar, allowWordManyChar, siUnitsOneChar);\n    const siSymbols = P.alt(siPrefixManyChar, siPrefixOneChar, concatSymbol);\n\n    // Construct an overall parser.\n    return P.alt(siUnits, siSymbols, P.digit)\n    .many()\n    .assert(\n        results => results.reduce((prev, value) => prev || siUnits.parse(value).status, false),\n        'Must contain at least one unit symbols'\n    );\n};\n\nmodule.exports = (context, userOptions = {}) => {\n    const options = Object.assign({}, defaultOptions, userOptions);\n    const {Syntax, RuleError, report, getSource} = context;\n    return {\n        [Syntax.Str](node) {\n            if (!isUserWrittenNode(node, context)) {\n                return;\n            }\n            const matches = matchCaptureGroupAll(getSource(node), numberWithUnitTarget);\n\n            matches.forEach(match => {\n                const siUnitParser = generateSiUnitParser(options.allowedUnits, options.restrictNonSIUnits);\n                const parseResult = siUnitParser.parse(match.text);\n                const isSymbolOnly = concatSymbol.parse(match.text);\n                if(parseResult.status === false && isSymbolOnly.status === false) report(\n                    node,\n                    new RuleError(`「${match.text}」には、SI単位系で使用できない文字が含まれています。SI単位系を使用してください。`, {\n                        index: match.index,\n                    })\n                );\n            });\n        }\n    };\n};\n"],"mappings":"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"}