{"version":3,"file":"sentence-length.js","names":["_sentenceSplitter","require","_textlintUtilToString","_textlintRuleHelper","_regexpStringMatcher","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","key","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","removeRangeFromString","text","regExpStrings","patterns","map","pattern","createRegExp","result","replace","defaultOptions","max","skipPatterns","skipUrlStringLink","exclusionPatterns","isSentenceNode","node","type","SentenceSplitterSyntax","Sentence","reporter","context","_options$max","_ref","_options$skipPatterns","_options$skipUrlStrin","options","maxLength","helper","RuleHelper","Syntax","RuleError","report","isUrlStringLink","Link","linkNode","nodeText","StringSource","toString","url","Document","Paragraph","isChildNode","BlockQuote","isChildrenSingleLinkNode","children","sentenceRootNode","splitAST","sentence","filteredSentence","sentenceChildNode","source","actualText","sentenceText","actualTextLength","sentenceLength","startLine","loc","start","line","concat","_default","exports","default"],"sources":["../src/sentence-length.ts"],"sourcesContent":["import type { TextlintRuleReporter } from \"@textlint/types\";\nimport type { TxtParentNode } from \"@textlint/ast-node-types\";\nimport type { TxtParentNodeWithSentenceNodeContent, TxtSentenceNodeChildren } from \"sentence-splitter\";\nimport { SentenceSplitterSyntax, splitAST, TxtSentenceNode } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { createRegExp } from \"@textlint/regexp-string-matcher\";\n\nfunction removeRangeFromString(text: string, regExpStrings: string[]) {\n    const patterns = regExpStrings.map((pattern) => {\n        return createRegExp(pattern);\n    });\n    let result = text;\n    patterns.forEach((pattern) => {\n        result = result.replace(pattern, \"\");\n    });\n    return result;\n}\n\nexport type Options = {\n    max?: number;\n    /**\n     * The strings that match following patterns is un-count of the sentence\n     * See https://github.com/textlint/regexp-string-matcher\n     */\n    skipPatterns?: string[];\n    /**\n     * If it is true, skip the count of following link node.\n     *\n     * [https://example.com](https://example.com)\n     * <https://example.com>\n     *\n     * UrlStringLink is has the title which is same of href.\n     */\n    skipUrlStringLink?: boolean;\n    /**\n     * @deprecated use skipPatterns\n     */\n    exclusionPatterns?: string[];\n};\nconst defaultOptions: Required<Options> = {\n    max: 100,\n    skipPatterns: [],\n    skipUrlStringLink: true,\n    /**\n     * @deprecated\n     */\n    exclusionPatterns: []\n};\n\nconst isSentenceNode = (node: TxtParentNodeWithSentenceNodeContent): node is TxtSentenceNode => {\n    return node.type === SentenceSplitterSyntax.Sentence;\n};\nconst reporter: TextlintRuleReporter<Options> = (context, options = {}) => {\n    const maxLength = options.max ?? defaultOptions.max;\n    const skipPatterns = options.skipPatterns ?? options.exclusionPatterns ?? defaultOptions.skipPatterns;\n    const skipUrlStringLink = options.skipUrlStringLink ?? defaultOptions.skipUrlStringLink;\n    const helper = new RuleHelper(context);\n    const { Syntax, RuleError, report } = context;\n    const isUrlStringLink = (node: TxtSentenceNodeChildren): boolean => {\n        if (node.type !== Syntax.Link) {\n            return false;\n        }\n        const linkNode = node as TxtParentNode;\n        const nodeText = new StringSource(linkNode).toString();\n        return node.url === nodeText;\n    };\n    // toPlainText\n    return {\n        [Syntax.Document](node) {\n            if (options.exclusionPatterns) {\n                report(node, new RuleError(\"exclusionPatterns is deprecated. Use skipPatterns instead.\"));\n            }\n        },\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.BlockQuote])) {\n                return;\n            }\n            // If a single Link node in the paragraph node, should be ignore the link length\n            const isChildrenSingleLinkNode = node.children.length === 1 && node.children[0].type === Syntax.Link;\n            if (isChildrenSingleLinkNode) {\n                return;\n            }\n            // empty break line == split sentence\n            const sentenceRootNode = splitAST(node);\n            sentenceRootNode.children.filter(isSentenceNode).forEach((sentence) => {\n                const filteredSentence = skipUrlStringLink\n                    ? {\n                          ...sentence,\n                          children: sentence.children.filter((sentenceChildNode) => {\n                              return !isUrlStringLink(sentenceChildNode);\n                          })\n                      }\n                    : sentence;\n                const source = new StringSource(filteredSentence);\n                const actualText = source.toString();\n                const sentenceText = removeRangeFromString(actualText, skipPatterns);\n                // larger than > 100\n                const actualTextLength = actualText.length;\n                const sentenceLength = sentenceText.length;\n                if (sentenceLength > maxLength) {\n                    const startLine = filteredSentence.loc.start.line;\n                    report(\n                        // @ts-expect-error: It is compatible with textlint node\n                        filteredSentence,\n                        new RuleError(`Line ${startLine} sentence length(${\n                            sentenceLength !== actualTextLength\n                                ? `${sentenceLength}, original:${actualTextLength}`\n                                : sentenceLength\n                        }) exceeds the maximum sentence length of ${maxLength}.\nOver ${sentenceLength - maxLength} characters.`)\n                    );\n                }\n            });\n        }\n    };\n};\nexport default reporter;\n"],"mappings":"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"}